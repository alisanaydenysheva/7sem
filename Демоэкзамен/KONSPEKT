# Конспект
# Диаграммы (UML-диаграммы и ER-диаграммы)
UML (Unified Modeling Language) - международный язык рисования схем.<br>
# Плюсы и минусы UML
Минусы: трата времени; необходимость знания различных диаграмм и их нотаций<br>
Плюсы: возможность посмотреть задачу с разных т.з.; другим программистам легче понять суть задачи м способ ее реализации;диаграммы сравнительно просты для чтения после достаточно быстрого ознакомления с их синтаксисом.<br> 
# Для чего она нужна?
- диаграмма прецедентов/вариантов использования;<br>
- описание возможных сценариев работы с системой с т.з. пользователя;<br>
- возможные пути использования системы;<br>
- описание всех участников системы (актеры);<br>
Для построения UseCase диаграммы открыть предметную область<br>
# Отношения в UseCase диаграмме
Отношение ассоциации - отражает возможность использования актером прецедента; Отношение включения - поведение одного прецедента включается в другой в качестве составного, причем дополнительный вариант использования не может выполняться без основного<br>
Отношение расширения - отражает возможное приосединение одного использования к другому, при этом расширяющий вариант использования выполняется лишь при определенных условиях и не является обязательным для выполения основного прецедента
Include Extend прямая линия<br>
Ассоциация - использует Include - используем если без этого действия нельзя выполнить основное
Extend - необязательное действие<br>
# ER-диаграммы
ER-diagramma - Entity-Relationship model, модель «сущность — связь». В БД сущность - таблица. ER делиться на концептуацльная и физическая - диаграмма, которую СУБД строит автоматически<br>
Физическая:<br>
- нивилируется автоматически<br>
- отображается тип данных<br>
- могут ли быть нулевые значения (ставим галочку, если поле необязательное<br>
- Всё написано на английском<br>
Концептуальная:<br>
- нет типа данных<br>
- заполняется на русском<br>
- строится вручную в visio<br>
- связи многие ко многим<br>

Отдельную таблицу для связи "многие-ко-многим" НЕ СОЗДАЮТ!1!!
Нормальные формы (НФ):<br>
- НФ1 - 1 ячейка - одно значение<br>
- НФ2 - вынести повторяющиеся элементы в отдельную таблицу<br>
- НФ3 - смотрим на взаимосвязи столбцов, если столбцы друг от друга не зависят, то выносим их в разные таблицы<br>
# Cоздание БД
1. копируем скрипт БД<br>
2. открываем MS SQL Server Management Studio<br>
3. создаем БД с помощью кпопки "New Database" изображение нажимаем ее и жмем ОК<br>
file:///C:/Users/Admin/Desktop/демоекз/1.png
4. в появившуюся БД вставляем скрипт из буфера обмена при помощи New Query изображение<br>
5. после создаем ER-диаграмму при помощи New Database Diagram в разделе Database Diagram изображение<br>
6. Ждем и наслаждаемся результатом!<br>
# Структура базы данных
Отношения - таблица<br>
Кортеж - соответствует строке этой таблицы<br>
Атрибут - столбец<br>
https://user-images.githubusercontent.com/86486142/189946486-b179d61c-2ef8-499c-b0ed-6be3d61b53c6.png
https://user-images.githubusercontent.com/86486142/189946486-b179d61c-2ef8-499c-b0ed-6be3d61b53c6.png
Отключать автоинкримент, если первичный ключ - это паспортные двнные или другие данные, которые не идут попорядку<br>
Связь - 1 ко многим = внешний ключ<br>
Таблица у которой один выбираем первичный ключ и ведём связь к столбцу таблицы много (в одной стране много отелей)<br>
Многие ко многим (много книг нравятся многим людям)<br>
Отдельная таблица с двумя первичными ключами<br>
Генерация скрипта<br>
file:///C:/Users/Admin/Desktop/демоекз/2.png
если не сохраняется<br>
https://user-images.githubusercontent.com/90381005/189873578-90d6bab2-5b65-4ce1-9413-e479fc371032.png
убрать галочку: запретить сохранение...<br>

Типы данных:<br>
- числовые int, char, varchar, nvarchar(255), money, varbinary(50)<br>
- логические bool<br>
- символьные text<br>
- дата date datetime<br>
# WPF
WinForms-WPF-UWP<br><br>
Возможности WPF:<br>
- адаптивная верстка -привязка данных Выбирать WPF App нужно будет с расширением (.NET Framework) Элементы компоновки(контейнеры):<br>
- Grid<br>
- StackPanel<br>
- WrapPanel Элементы таблицы:<br>
- RowDefinitions - строки<br>
- ColumnDefinitions - столбцы<br>
- Grid.ColumnSpan - разделение по кол-ву столбцов (RowSpan - разделение по строкам)<br>
Авторазмер - подгоняет элемент под размер окна<br>
Абсолютный размер - занимает строго столько места, сколько указано<br>
StackPanel - располагает все элементы в ряд по вертикали или горизонтали<br>
Вместо отступов лучше использовать Alignment<br>
WrapPanel - располагает все элементы в одной строке или колонке<br>
Cтиль прописывается в файле App.xaml<br>
https://user-images.githubusercontent.com/86486142/191473222-3d8b1e67-bb06-40ee-a424-5404fba8a1a3.png
https://user-images.githubusercontent.com/86486142/191473620-531da4a7-5c3e-4cbe-8817-91b93d3c1cbb.png
https://user-images.githubusercontent.com/86486142/191474429-fde29c0b-abbc-4958-b2ae-a4317f24533f.png
Заливка для текста - foreground; для фона- background;
